---
name: Checking the pyproject and flit environment
author: Frank Brehm
description: Checking the current environment for validity for pyproject with flint.

inputs:
  srcdir:
    description: "The sorce directoryi for Python modules."
    required: false
    default: 'src'

runs:
  using: "composite"
  steps:

    - name: 'Check for pyproject.toml'
      shell: bash
      run: |
        echo "Checking for availibility of pyproject.toml"
        if [[ ! -f pyproject.toml ]] ; then
            echo "::error::File pyproject.toml not found."
            exit 5
        fi
        echo "Found pyproject.toml."

    - name: "Check for source directory."
      shell: bash
      run: |
        echo "Checking for availibility of '${{ inputs.srcdir }}' ..."
        if [[ ! -d "${{ inputs.srcdir }}" ]] ; then
            echo "::error::Source directory '${{ inputs.srcdir }}' not found or is not a directory."
            exit 6
        fi
        echo "Found Source directory '${{ inputs.srcdir }}'."

    - name: "Create AWK script for get all keys in a section."
      shell: bash
      id: create-awk-script-keys
      run: |
        echo "Creating AWK script ..."
        lines=$( cat <<-EOF
        	BEGIN {
        	    in_section = 0
        	}

        	{
        	    # Cleaning row: removing leading and trailing whitespaces and cut before comment character
        	    line = \$0
        	    sub(/^[ \t]+/, "", line)
        	    sub(/[ \t]+\$/, "", line)
        	    sub(/[ \t]*[#;].*\$/, "", line)

        	    # Skip on empty row
        	    if (line == "") {
        	        next
        	    }

        	    # Check for section header
        	    if (line ~ /^\[.*\]\$/) {
        	        section = substr(line, 2, length(line) - 2)
        	        if (section == target_section) {
        	            in_section = 1
        	        } else {
        	            in_section = 0
        	        }
        	        next
        	    }

        	    # Perform key-value-pair in target section
        	    if (in_section == 1) {
        	        if (line ~ /^[a-zA-Z0-9_-]+[ \t]*=[ \t]*.*\$/) {
        	            # extract and print key
        	            split(line, a, /[ \t]*=[ \t]*/)
        	            print a[1]
        	        }
        	    }
        	}
        	EOF
        )

        awk_file_keys=$( mktemp get-all-keys-from-section.XXXXXXXXXX.awk )
        echo "Creating AWK script: '${awk_file_keys}'."
        echo "${lines}" > "${awk_file_keys}"

        echo "::group::Content of AWK script:"
        cat "${awk_file_keys}"
        echo "::endgroup::"

        echo "awk_file_keys='${awk_file_keys}'" >>$GITHUB_OUTPUT

    - name: "Create AWK script for get the value of a keys in a section."
      shell: bash
      id: create-awk-script-values
      run: |
        echo "Creating AWK script ..."
        lines=$( cat <<-EOF
        	# Script for extracting a value from a INI-file
        	#
        	# Example for calling:
        	# awk -f get_ini_value.awk -v target_section="[build-system]" -v key="build-backend" pyproject.toml

        	BEGIN {
        	  # Defaults
        	  found_section = 0
        	}

        	{
        	  # Strip leading and trailing white spaces
        	  line = \$0
        	  gsub(/^[ \t]+|[ \t]+\$/, "", line)

        	  # Step comments and empty rows
        	  if (line ~ /^;/ || line ~ /^#/) {
        	    next
        	  }
        	  if (length(line) == 0) {
        	    next
        	  }

        	  # Check for the correct section
        	  if (line ~ /^\[.*\]\$/) {
        	    section = substr(line, 2, length(line) - 2)
        	    if (section == target_section) {
        	      found_section = 1
        	    } else {
        	      found_section = 0
        	    }
        	    next
        	  }

        	  # If we are in the correct section
        	  if (found_section == 1) {
        	    if (line ~ "^" key "[ \t]*=.*") {
        	      split(line, arr, /[ \t]*=[ \t]*/)

        	      value = arr[2]

        	      gsub(/^"|"\$/, "", value)
        	      gsub(/^'|'\$/, "", value)

        	      print value

        	      exit
        	    }
        	  }
        	}
        	EOF
        )

        awk_file_value=$( mktemp get-value-from-section.XXXXXXXXXX.awk )
        echo "Creating AWK script: '${awk_file_value}'."
        echo "${lines}" > "${awk_file_value}"

        echo "::group::Content of AWK script:"
        cat "${awk_file_value}"
        echo "::endgroup::"

        echo "awk_file_value='${awk_file_value}'" >>$GITHUB_OUTPUT

    - name: "Get entrypoints from pyproject.toml."
      id: get-entrypoints
      shell: bash
      run: |
        awk_file_keys="${{ steps.create-awk-script-keys.outputs.awk_file_keys }}"

        echo -e "Get all entry points ..."
        ENTRYPOINTS=''
        cmd="awk -f '${awk_file_keys}' -v target_section=project.scripts pyproject.toml"
        echo "Calling ${cmd}"
        result=$( eval ${cmd} )
        echo "Got raw entrypoints from AWK script: '${result}'"

        if [[ -n "${result}" ]] ; then
            echo "Evaluate entrypoints ..."
            for entrypoint in ${result}; do
                if [[ -n "${ENTRYPOINTS}" ]] ; then
                    ENTRYPOINTS+=" "
                fi
                ENTRYPOINTS+="${entrypoint}"
            done
        fi

        echo "ENTRYPOINTS=\"${ENTRYPOINTS}\"" >>"$GITHUB_ENV"

        if [[ -n "${ENTRYPOINTS}" ]] ; then
            echo "::notice::Found entrypoints: ${ENTRYPOINTS}"
        else
            echo "::notice::Did not found any entrypoints."
        fi

    - name: "Check for flit as build system"
      id: check-for-flit
      shell: bash
      run: |
        awk_file_value="${{ steps.create-awk-script-values.outputs.awk_file_value }}"
        target_build_backend='flit_core.buildapi'

        echo "Get name of the build system."

        cmd="awk -f '${awk_file_value}' -v target_section=build-system -v key=build-backend pyproject.toml"
        echo "Calling ${cmd}"
        build_system=$( eval ${cmd} )
        echo "Got build system from AWK script: '${build_system}'"

        if [[ "${build_system}" != "${target_build_backend}" ]] ; then
            echo "::error::Found invalid build-backend '${build_system}', and not '${target_build_backend}' in pyproject.toml."
            exit 7
        fi

        echo "::notice::Found build backend '${build_system}' in pyproject.toml."

    - name: "Get directory for external data."
      id: get-data-dir
      shell: bash
      run: |
        awk_file_value="${{ steps.vars.outputs.awk_file_value }}"

        echo "Get the directory for external data."

        DATA_DIR=''

        cmd="awk -f '${awk_file_value}' -v target_section=tool.flit.external-data -v key=directory pyproject.toml"
        echo "Calling ${cmd}"
        DATA_DIR=$( eval ${cmd} )

        echo "DATA_DIR=\"${DATA_DIR}\"" >>"$GITHUB_ENV"

        if [[ -n "${DATA_DIR}" ]] ; then
            echo "::notice::Found data directory: ${DATA_DIR}"
        else
            echo "::notice::Did not found data directory."
        fi

# vim: et tabstop=2 expandtab shiftwidth=2 softtabstop=2 list

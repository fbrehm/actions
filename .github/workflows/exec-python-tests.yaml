---

name: "Execute pytest on a Python source package."

################################################################################
# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      has_i18n:
        description: 'Does the package support localisation and internationalisation?'
        type: boolean
        default: true
      test_python_versions:
        description: 'A list of Python versions, for which the package should be tested.'
        type: string
        default: '["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]'
      latest_debian_version:
        description: 'The short name of the latest stable Debian version.'
        type: string
        default: 'bookworm'

################################################################################
jobs:

  ###########################
  define-test-matrix:
    name: "Defining the Python Test matrix"
    runs-on: ubuntu-latest
    container: debian:${{ inputs.latest_debian_version }}
    env:
      PYTHON_VERSIONS: ${{ inputs.test_python_versions }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: "Update package lists"
        id: apt-update
        shell: bash
        run: |
          echo "Update all package lists."
          apt update --yes

      - name: "Install JQ"
        shell: bash
        run: |
          apt install --yes jq
          echo -e "Version of JQ: $( jq --version )"

      - name: Defining the Test-Matrix
        id: set-matrix
        shell: bash
        run: |
          if [[ -z "${{ inputs.test_python_versions }}" ]] ; then
            echo "::error::No Python versions given for creating the Python test matrix"
            exit 5
          fi

          matrix_json="{\"python_version\": ${PYTHON_VERSIONS} }"

          echo -e "\nGenerated JSON:"
          echo "${matrix_json}" | jq -C .

          echo "matrix=${matrix_json}" >> ${GITHUB_OUTPUT}
          echo "::debug::Using Matrix: $( cat ${GITHUB_OUTPUT} )"

  ###########################
  test:
    name: 'Exec Python-${{ matrix.python_version }} tests'
    runs-on: ubuntu-latest
    needs: define-test-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.define-test-matrix.outputs.matrix) }}
    container: python:${{ matrix.python_version }}
    env:
      LANG: ${{ matrix.language }}
      LANGUAGE: ${{ matrix.language }}
      LC_ALL: ${{ matrix.language }}
    steps:
      - name: "Checking out sources."
        uses: actions/checkout@v4
      - name: "Show Environment"
        shell: bash
        run: |
          echo "Bash enviroment:"
          env | sort
          echo -e "\nPython version:"
          python --version
      - name: "Preparing the Debian container"
        uses: fbrehm/prepare-debian-container@main
        with:
          manage_locales: ${{ github.event.inputs.has_i18n }}
      - name: "Installing PIP modules and linter tools"
        uses: fbrehm/github-install-pip-modules@main
        with:
          install_pytest: true
      - name: Executing PyTest for Python ${{ matrix.python_version }} and language ${{ matrix.language }}
        shell: bash
        run: pytest --verbose

# vim: et tabstop=2 expandtab shiftwidth=2 softtabstop=2 list

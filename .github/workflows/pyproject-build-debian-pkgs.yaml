---

name: "Building Debian packages of a pyproject source package."

################################################################################
# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      debian_email:
        description: 'The mail address of the user, which will be used to update debian/chagelog.'
        type: string
        default: 'frank@brehm-online.com'
      debian_fullname:
        description: 'A human readable name of the user, which will be used to update debian/chagelog.'
        type: string
        default: 'Frank Brehm'
      has_i18n:
        description: 'Does the package support localisation and internationalisation?'
        type: boolean
        default: true
      languages:
        description: 'A list of languages, which will be supported, if has_i18n is true.'
        type: string
        default: '["de_DE.UTF-8", "en_US.UTF-8"]'
      additional_locales:
        description: 'A whitespace separated list of additional locales (except en_US.UTF-8)'
        type: string
        default: 'de_DE.UTF-8'
      latest_debian_version:
        description: 'The short name of the latest stable Debian version.'
        type: string
        default: 'bookworm'
      debian_versions:
        description: 'Whitespace separated list of Debian and Ubuntu versions to build the package for.'
        type: string
        default: 'debian-bullseye debian-bookworm debian-trixie ubuntu-focal ubuntu-jammy ubuntu-noble'
      additional_debian_build_packages:
        description: "A withespace separated list of packages additional to the base build packages"
        type: string
      password_file:
        description: 'The file containing the password of the private GPG key.'
        type: string
        default: '.private/uhu.txt'
      key_id:
        description: 'The ID of the used private GPG key.'
        type: string
      retention_days:
        description: "The days for keeping the generated packages at GitHub."
        type: number
        default: 8
      timezone:
        description: "The timezone used for this job."
        type: string
        default: 'Europe/Berlin'
      entrypoints:
        description: "A whitespace separated list of entrypoints, which are converted to executable Python scripts."
        type: string
        default: ''
      data_dir:
        description: "The data directory for containing man pages, i18n files a.s.o."
        type: string
        default: ''
      revision:
        description: "Revision count for current version."
        type: string
        default: '1'
    secrets:
      public_key:
        description: 'The exported public GPG key"'
      private_key:
        description: 'The exported private GPG key"'
      key_password:
        description: 'The password of the imported private GPG key.'

################################################################################
env:
  DEBFULLNAME: ${{ inputs.debian_fullname }}
  DEBEMAIL: ${{ inputs.debian_email }}
  GIT_REF: ${{ github.ref }}
  GIT_REFNAME: ${{ github.ref_name }}
  GIT_REFTYPE: ${{ github.ref_type }}

################################################################################
jobs:

  ###########################
  define-debian-build-matrix:
    name: "Define Debian build Matrix"
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' || github.ref_name == 'master' || startsWith(github.ref_name, 'test') || github.ref_name == 'dev/workflow' || startsWith(github.ref_name, 'build') || startsWith(github.ref, 'refs/tags/')  }}
    container: debian:${{ inputs.latest_debian_version }}
    env:
      DEBIAN_VERSIONS: ${{ inputs.debian_versions }}
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: "Update package lists"
        id: apt-update
        shell: bash
        run: |
          echo '.'
          echo "::group::Update all package lists."
          apt update --yes
          echo "::endgroup::"

      - name: "Install JQ"
        id: install-jq
        shell: bash
        run: |
          echo '.'
          if type -p jq >/dev/null; then
              echo "The package jq is already installed."
          else
              echo "::group::Installing package 'jq' ..."
              apt install --yes jq
              echo "::endgroup::"
          fi
          echo "Version of JQ: $( jq --version )"

      - name: "Defining the build-matrix"
        id: set-matrix
        shell: bash
        run: |
          if [[ -z "${DEBIAN_VERSIONS}" ]] ; then
            echo "::error::No Debian or Ubuntu versions given for building packages."
            exit 5
          fi
          matrix_json='{"include": ['
          first_distro='y'

          for deb_version in ${DEBIAN_VERSIONS}; do
            deb_version_lc=$( echo "${deb_version}" | tr '[:upper:]' '[:lower:]' )
            echo "Performing Debian version '${deb_version}' -> '${deb_version_lc}'"
            case "${deb_version_lc}" in
              debian-bullseye|bullseye|debian-11)
                if [[ "${first_distro}" != 'y' ]] ; then
                  matrix_json+=", "
                fi
                matrix_json+="{"
                matrix_json+="\"title\": \"Debian 11 Bullseye\", "
                matrix_json+="\"distributor\": \"Debian\", "
                matrix_json+="\"os_codename\": \"bullseye\", "
                matrix_json+="\"os_release\": \"11\", "
                matrix_json+="\"container\": \"debian:bullseye\", "
                matrix_json+="\"version_prefix\": \"deb11\", "
                matrix_json+="\"compat\": \"12\""
                matrix_json+="}"
                echo "::notice title=Define Debian build matrix::Adding Debian 11 Bullseye"
                ;;
              debian-bookworm|bookworm|debian-12)
                if [[ "${first_distro}" != 'y' ]] ; then
                  matrix_json+=", "
                fi
                matrix_json+="{"
                matrix_json+="\"title\": \"Debian 12 Bookworm\", "
                matrix_json+="\"distributor\": \"Debian\", "
                matrix_json+="\"os_codename\": \"bookworm\", "
                matrix_json+="\"os_release\": \"12\", "
                matrix_json+="\"container\": \"debian:bookworm\", "
                matrix_json+="\"version_prefix\": \"deb12\", "
                matrix_json+="\"compat\": \"12\""
                matrix_json+="}"
                echo "::notice title=Define Debian build matrix::Adding Debian 12 Bookworm"
                ;;
              debian-trixie|trixie|debian-13)
                if [[ "${first_distro}" != 'y' ]] ; then
                  matrix_json+=", "
                fi
                matrix_json+="{"
                matrix_json+="\"title\": \"Debian 13 Trixie\", "
                matrix_json+="\"distributor\": \"Debian\", "
                matrix_json+="\"os_codename\": \"trixie\", "
                matrix_json+="\"os_release\": \"13\", "
                matrix_json+="\"container\": \"debian:trixie\", "
                matrix_json+="\"version_prefix\": \"deb13\", "
                matrix_json+="\"compat\": \"13\""
                matrix_json+="}"
                echo "::notice title=Define Debian build matrix::Adding Debian 13 Trixie"
                ;;
              debian-forky|forky|debian-14)
                if [[ "${first_distro}" != 'y' ]] ; then
                  matrix_json+=", "
                fi
                matrix_json+="{"
                matrix_json+="\"title\": \"Debian 14 Forky\", "
                matrix_json+="\"distributor\": \"Debian\", "
                matrix_json+="\"os_codename\": \"forky\", "
                matrix_json+="\"os_release\": \"14\", "
                matrix_json+="\"container\": \"debian:forky\", "
                matrix_json+="\"version_prefix\": \"deb14\", "
                matrix_json+="\"compat\": \"14\""
                matrix_json+="}"
                echo "::notice title=Define Debian build matrix::Adding Debian 14 Forky"
                ;;
              debian-duke|duke|debian-15)
                if [[ "${first_distro}" != 'y' ]] ; then
                  matrix_json+=", "
                fi
                matrix_json+="{"
                matrix_json+="\"title\": \"Debian 15 Duke\", "
                matrix_json+="\"distributor\": \"Debian\", "
                matrix_json+="\"os_codename\": \"duke\", "
                matrix_json+="\"os_release\": \"15\", "
                matrix_json+="\"container\": \"debian:duke\", "
                matrix_json+="\"version_prefix\": \"deb15\", "
                matrix_json+="\"compat\": \"15\""
                matrix_json+="}"
                echo "::notice title=Define Debian build matrix::Adding Debian 15 Duke"
                ;;
              ubuntu-focal|focal|ubuntu-20.04)
                if [[ "${first_distro}" != 'y' ]] ; then
                  matrix_json+=", "
                fi
                matrix_json+="{"
                matrix_json+="\"title\": \"Ubuntu 20.04 Focal Fossa\", "
                matrix_json+="\"distributor\": \"Ubuntu\", "
                matrix_json+="\"os_codename\": \"focal\", "
                matrix_json+="\"os_release\": \"20.04\", "
                matrix_json+="\"container\": \"ubuntu:focal\", "
                matrix_json+="\"version_prefix\": \"ubuntu20.04\", "
                matrix_json+="\"compat\": \"12\""
                matrix_json+="}"
                echo "::notice title=Define Debian build matrix::Adding Ubuntu 20.04 Focal Fossa"
                ;;
              ubuntu-jammy|jammy|ubuntu-22.04)
                if [[ "${first_distro}" != 'y' ]] ; then
                  matrix_json+=", "
                fi
                matrix_json+="{"
                matrix_json+="\"title\": \"Ubuntu 22.04 Jammy Jellyfish\", "
                matrix_json+="\"distributor\": \"Ubuntu\", "
                matrix_json+="\"os_codename\": \"jammy\", "
                matrix_json+="\"os_release\": \"22.04\", "
                matrix_json+="\"container\": \"ubuntu:jammy\", "
                matrix_json+="\"version_prefix\": \"ubuntu22.04\", "
                matrix_json+="\"compat\": \"12\""
                matrix_json+="}"
                echo "::notice title=Define Debian build matrix::Adding Ubuntu 22.04 Jammy Jellyfish"
                ;;
              ubuntu-noble|noble|ubuntu-24.04)
                if [[ "${first_distro}" != 'y' ]] ; then
                  matrix_json+=", "
                fi
                matrix_json+="{"
                matrix_json+="\"title\": \"Ubuntu 24.04 Noble Numbat\", "
                matrix_json+="\"distributor\": \"Ubuntu\", "
                matrix_json+="\"os_codename\": \"noble\", "
                matrix_json+="\"os_release\": \"24.04\", "
                matrix_json+="\"container\": \"ubuntu:noble\", "
                matrix_json+="\"version_prefix\": \"ubuntu24.04\", "
                matrix_json+="\"compat\": \"12\""
                matrix_json+="}"
                echo "::notice title=Define Debian build matrix::Adding Ubuntu 24.04 Noble Numbat"
                ;;
              *)
                echo "::error title=Define Debian build matrix::Unknown Debian or Ubuntu version '${deb_version}' given." >&2
                exit 6
                ;;
            esac
            first_distro='n'
          done

          matrix_json+="]}"

          echo '.'
          echo -e "Generated JSON:"
          echo "${matrix_json}" | jq -C .

          echo "matrix=${matrix_json}" >> ${GITHUB_OUTPUT}

  ###########################
  build-debian-sources:
    runs-on: ubuntu-latest
    name: "Build Deb Source Packages"
    if: ${{ github.ref_name == 'main' || github.ref_name == 'master' || startsWith(github.ref_name, 'test') || github.ref_name == 'dev/workflow' || startsWith(github.ref_name, 'build') || startsWith(github.ref, 'refs/tags/')  }}
    container: debian:${{ inputs.latest_debian_version }}
    env:
      DEBIAN_VERSION: ${{ inputs.latest_debian_version }}
    steps:
      - name: "Checking out sources."
        id: checkout-sources
        uses: actions/checkout@v5

      - name: "Install Debian Python Build Environment"
        id: install-debian-pkgs
        uses: fbrehm/debian-install-python-buildenv@main
        with:
          additional_packages: ${{ inputs.additional_debian_build_packages }}

      - name: "Set and show Environment"
        id: set-env
        shell: bash
        run: |
          echo '.'
          echo "Updating GITHUB_ENV ..."
          export PKG_NAME=$( head -n 1 debian/changelog | awk '{print $1}' )
          export PKG_VERSION=$( head -n 1 debian/changelog | sed -e "s/^[^(]*(//" -e "s/).*//" )
          export SIGNING_HOOK_SCRIPT="${HOME}/signing-hook-script.sh"

          echo "PKG_NAME=${PKG_NAME}" >>"$GITHUB_ENV"
          echo "PKG_VERSION=${PKG_VERSION}" >>"$GITHUB_ENV"
          echo "SIGNING_HOOK_SCRIPT=${SIGNING_HOOK_SCRIPT}" >>"$GITHUB_ENV"

          echo "::notice title=Build Debian source package::Building Debian source package on Debian ${{ inputs.latest_debian_version }}."
          if [[ -f /etc/os-release ]] ; then
              echo "OS release for building source package:"
              cat /etc/os-release
          fi

          echo '.'
          echo "::group::Bash enviroment:"
          env | sort
          echo "::endgroup::"

          echo "::notice title=Build Debian source package::Python version: $(python3 --version)"

          if [[ -f setup.py ]] ; then
              echo "."
              echo "Removing setup.py ..."
              rm -fv setup.py
          fi

      - name: 'Adding Debian repo definitions of Frank Brehm'
        id: add-fbrehm-apt-repo
        uses: fbrehm/github-add-fb-debian-repo@main
        with:
          vendor: Debian
          distro: ${{ inputs.latest_debian_version }}

      - name: "Preparing the Debian container"
        id: prepare-debian-container
        uses: fbrehm/prepare-debian-container@main
        with:
          manage_locales: false
          install_flit: true

      - name: 'Preparing GPG for signing files without entering a password'
        id: setup-gpg
        uses: fbrehm/github-setup-gpg@main
        with:
          public_key: ${{ secrets.public_key }}
          private_key: ${{ secrets.private_key }}
          key_password: ${{ secrets.key_password }}
          password_file: ${{ inputs.password_file }}
          key_id: ${{ inputs.key_id }}

      - name: 'Create signing hook script of building source package.'
        shell: bash
        id: create-signing-hook
        run: |
          dsc_file="${PKG_NAME}_${PKG_VERSION}.dsc"
          buildinfo_file="${PKG_NAME}_${PKG_VERSION}_source.buildinfo"
          changes_file="${PKG_NAME}_${PKG_VERSION}_source.changes"
          password_file_abs=$( readlink --canonicalize-missing "${{ inputs.password_file }}" )

          if [[ -e "${{ inputs.password_file }}" ]] ; then
              hash_bang='#!/usr/bin/env bash'

              shell_lines=$( cat <<-EOF
          		${hash_bang}
          		echo
          		echo "This is the signing script."
          		echo "==========================="
          		echo
          		printf "Command line: "
          		echo \$0 \$*
          		printf "Pwd: "
          		pwd
          		echo
          		echo "Current sources:"
          		ls -l --color=always '${dsc_file}' '${buildinfo_file}' '${changes_file}'
          		echo
          		cmd="echo 'y' | debsign -k${{ inputs.key_id }} '${dsc_file}' '${buildinfo_file}' '${changes_file}'"
          		echo "Executing: \$cmd"
          		eval \$cmd
          		echo
          		echo "Signed sources:"
          		ls -l --color=always '${dsc_file}' '${buildinfo_file}' '${changes_file}'
          		echo
          		EOF
              )

              echo "${shell_lines}" > "${SIGNING_HOOK_SCRIPT}"
              chmod +x --verbose "${SIGNING_HOOK_SCRIPT}"

              echo '.'
              echo -e "Generated ${SIGNING_HOOK_SCRIPT}:"
              cat "${SIGNING_HOOK_SCRIPT}"
              echo "<--"

              echo '.'
              echo "The imported private keys:"
              gpg --list-secret-keys
              echo "<-- EOF"
          else
              echo '.'
              echo "Don't create '${SIGNING_HOOK_SCRIPT}' because of failing necessary data."
          fi

      - name: 'Finally build the source package.'
        id: build-source-package
        shell: bash
        run: |
          echo '.'
          PASSWORD_FILE_ABS=$( readlink --canonicalize-missing "${{ inputs.password_file }}" )
          echo "Password file: '{PASSWORD_FILE_ABS}'"

          if [[ -e "${PASSWORD_FILE_ABS}" && -x "${SIGNING_HOOK_SCRIPT}" ]] ; then
              echo "::notice title=Build Debian source package::Building signed Debian source package for ${PKG_NAME}-${PKG_VERSION}"
              echo "y" | debuild --signing-hook="${SIGNING_HOOK_SCRIPT}" -S -i
          else
              echo "::notice title=Build Debian source package::Building unsigned Debian source package for ${PKG_NAME}-${PKG_VERSION}"
              debuild -S -i --no-sign
          fi

          echo "."
          echo "Generated stuff:"
          ls -lA --color=always ..
          echo "<-- EOF"

          echo "."
          echo "Moving all to the right place ..."
          mkdir -pv debian/pkgs/src
          mv -vi ../*.dsc ../*.tar.* ../*.build* ../*.changes debian/pkgs/src

          echo "."
          echo "Put stuff now at the right place:"
          ls -lA debian/pkgs/*/*
          echo "<-- EOF"

      - name: 'Upload Source Package'
        id: upload-source-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: debian_sources
          path: debian/pkgs/*/*
          retention-days: ${{ inputs.retention_days }}

  ###########################
  build-debian-bin:
    runs-on: ubuntu-latest
    needs:
      - define-debian-build-matrix
    name: "Build Deb Bin Pkgs for ${{ matrix.title }}"
    if: ${{ github.ref_name == 'main' || github.ref_name == 'master' || startsWith(github.ref_name, 'test') || github.ref_name == 'dev/workflow' || startsWith(github.ref_name, 'build') || startsWith(github.ref, 'refs/tags/')  }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.define-debian-build-matrix.outputs.matrix) }}
    container: ${{ matrix.container }}
    env:
      BUILDER: ${{ inputs.debian_fullname }} <${{ inputs.debian_email }}>
      COMPAT: ${{ matrix.compat }}
      DEBIAN_FRONTEND: noninteractive
      DISTRIBUTOR: ${{ matrix.distributor }}
      OS_CODENAME: ${{ matrix.os_codename }}
      OS_RELEASE: ${{ matrix.os_release }}
      OS_TITLE: ${{ matrix.title }}
      VERSION_PREFIX: ${{ matrix.version_prefix }}
      ENTRYPOINTS: ${{ inputs.entrypoints }}
      MAN_SECTION: 1
      REVISION: ${{ inputs.revision }}
    steps:
      - name: "Checking out sources."
        id: checkout-sources
        uses: actions/checkout@v5

      - name: "Install Debian Python Build Environment"
        id: install-debian-pkgs
        uses: fbrehm/debian-install-python-buildenv@main
        with:
          additional_packages: ${{ inputs.additional_debian_build_packages }}

      - name: "Set and show Environment"
        id: set-env
        shell: bash
        run: |
          echo '.'
          echo "Updating GITHUB_ENV ..."
          export PKG_NAME=$( head -n 1 debian/changelog | awk '{print $1}' )
          export PKG_VERSION=$( head -n 1 debian/changelog | sed -e "s/^[^(]*(//" -e "s/).*//" )
          export SIGNING_HOOK_SCRIPT="${HOME}/signing-hook-script.sh"
          export BUILD_VERSION="${PKG_VERSION}+${{ matrix.version_prefix }}"
          export TZ="${{ inputs.timezone }}"

          echo "PKG_NAME=${PKG_NAME}" >>"$GITHUB_ENV"
          echo "PKG_VERSION=${PKG_VERSION}" >>"$GITHUB_ENV"
          echo "SIGNING_HOOK_SCRIPT=${SIGNING_HOOK_SCRIPT}" >>"$GITHUB_ENV"
          echo "BUILD_VERSION=${BUILD_VERSION}" >>"$GITHUB_ENV"
          echo "TZ=${TZ}" >>"$GITHUB_ENV"

          echo "."
          echo "::notice title=Build Debian binary packages::Building Debian binary packages on ${OS_TITLE}."
          if [[ -f /etc/os-release ]] ; then
              echo "OS release:"
              cat /etc/os-release
          fi
          echo "."
          echo "::group::Bash enviroment:"
          env | sort
          echo "::endgroup::"

      - name: 'Setting timezone'
        id: set-timezone
        if: ${{ matrix.distributor == 'Ubuntu' }}
        run: |
          echo "."
          echo "Setting system timezone to '${TZ}' ..."
          ln -fvs /usr/share/zoneinfo/${{ inputs.timezone }} /etc/localtime
          echo "Current date: $( date --rfc-3339=seconds )"

      - name: 'Adding Debian repo definitions of Frank Brehm'
        id: add-fbrehm-apt-repo
        uses: fbrehm/github-add-fb-debian-repo@main
        with:
          vendor: ${{ matrix.distributor }}
          distro: ${{ matrix.os_codename }}

      - name: "Installing Python 3 .."
        shell: bash
        run: |
          echo "."
          echo "Installing Python 3 ..."
          echo "."
          echo "::group::APT install python3"
          apt install python3 --yes
          echo "::endgroup::"
          echo "::notice title=Build Debian binary packages::Python version: $(python3 --version)"

      - name: "Preparing the Debian container"
        id: prepare-debian-container
        uses: fbrehm/prepare-debian-container@main
        with:
          manage_locales: ${{ inputs.has_i18n }}
          additional_locales: ${{ inputs.additional_locales }}
          install_flit: true

      - name: "Installing necessary PIP modules."
        uses: fbrehm/actions/.github/actions/pyproject-install-pip-modules@main
        with:
          install_pytest: false
          install_linter_tools: false
          install_py_venv_package: true
          data_dir: ${{ inputs.data_dir }}

      - name: 'Creating man pages'
        id: create-man-pages
        shell: bash
        env:
          FLIT_ROOT_INSTALL: 1
        run: |
          if [[ -n "${ENTRYPOINTS}" ]] ; then
              man_dir="data/share/man/man${MAN_SECTION}"

              echo '.'
              echo "Generating MAN pages in '${man_dir}'."

              mkdir -p -v "${man_dir}"
              source .venv/bin/activate
              echo "Current PATH: '${PATH}'"

              echo '.'
              echo "Installing entrypoints ..."
              echo "Which flit: $( type -p flit )"
              flit install --deps production --python .venv/bin/python3

              echo '.'
              echo "::group::Installing click-man ..."
              pip3 install click-man
              echo "::endgroup::"

              for entrypoint in ${ENTRYPOINTS}; do
                  echo '.'
                  echo "::group::Generating man page for '${entrypoint}' ..."
                  cmd="click-man --target \"${man_dir}\" --man-version ${MAN_SECTION} \"${entrypoint}\""
                  echo "Calling: ${cmd}"
                  eval ${cmd}
                  echo "::endgroup::"
              done

              echo '.'
              echo "Generated man pages:"
              ls -l --color=always "${man_dir}"

              echo '.'
              echo "Compressing man pages:"
              gzip -v9 "${man_dir}"/*
          else
              echo "::notice title=Build Debian binary packages::No entrypoints found for creating man pages."
          fi

      - name: 'Preparing GPG for signing files without entering a password'
        id: setup-gpg
        uses: fbrehm/github-setup-gpg@main
        with:
          public_key: ${{ secrets.public_key }}
          private_key: ${{ secrets.private_key }}
          key_password: ${{ secrets.key_password }}
          password_file: ${{ inputs.password_file }}
          key_id: ${{ inputs.key_id }}

      - name: 'Updating Changelog'
        id: update-changelog
        shell: bash
        run: |
          NEW_VERSION="${BUILD_VERSION}-${REVISION}"

          echo -e "\nVersion to build: ${NEW_VERSION} - Builder: ${BUILDER}"
          msg="Build for ${{ matrix.distributor }} ${{ matrix.os_release }} - ${{ matrix.os_codename }}"
          echo "::notice title=Build Debian binary packages::${msg}"

          echo -e "\nAdding new changelog entry ..."
          debchange --newversion "${NEW_VERSION}" --force-bad-version --distribution "${{ matrix.os_codename }}" --urgency medium "${msg}"
          head -n 5 debian/changelog

      - name: 'Create signing hook script of building binary package.'
        id: create-signing-hook
        shell: bash
        run: |
          if [[ -e "${{ inputs.password_file }}" ]] ; then
              hash_bang='#!/usr/bin/env bash'

              echo '.'
              echo "Greating signing hook script '${SIGNING_HOOK_SCRIPT}' ..."

              shell_lines=$( cat <<-EOF
          		${hash_bang}
          		echo
          		echo "This is the signing script."
          		echo "==========================="
          		echo
          		printf "Command line: "
          		echo \$0 \$*
          		printf "Pwd: "
          		pwd
          		echo
          		echo "Avaiable secret keys:"
          		gpg --list-secret-keys
          		echo
          		echo "Current packages:"
          		ls -l --color=always *.deb
          		echo
          		cmd="debsigs --sign=origin --default-key=${{ inputs.key_id }} *.deb"
          		echo "Executing: \$cmd"
          		eval \$cmd
          		echo
          		echo "Signed packages:"
          		ls -l --color=always *.deb
          		echo
          		EOF
              )

              echo "${shell_lines}" > "${SIGNING_HOOK_SCRIPT}"
              chmod +x --verbose "${SIGNING_HOOK_SCRIPT}"

              echo '.'
              echo "::group::Generated ${SIGNING_HOOK_SCRIPT}:"
              cat "${SIGNING_HOOK_SCRIPT}"
              echo "<--"
              echo "::endgroup::"

              echo '.'
              echo -e "\nThe imported private keys:"
              gpg --list-secret-keys
              echo "<-- EOF"

          else
              echo '.'
              echo "Don't create '${SIGNING_HOOK_SCRIPT}' because of failing necessary data."
          fi

      - name: 'Finally build the binary package.'
        id: build-bin-package
        shell: bash
        run: |
          echo '.'
          echo "Setting debian/compat to ${{ matrix.compat }}"
          echo "${{ matrix.compat }}" > debian/compat

          echo '.'
          if [[ -e "${{ inputs.password_file }}" && -x "${SIGNING_HOOK_SCRIPT}" ]] ; then
              echo "::notice title=build-debian-sorce-package::Building signed Debian binary package for ${PKG_NAME}-${BUILD_VERSION}"
              echo "::group::Building signed Debian binary packages"
              echo "y" | debuild --signing-hook="${SIGNING_HOOK_SCRIPT}" -b -i -us -uc -ui
              echo "::endgroup::"
          else
              echo "::notice title=build-debian-sorce-package::Building unsigned Debian binary package for ${PKG_NAME}-${BUILD_VERSION}"
              echo "::group::Building unsigned Debian binary packages"
              debuild -b -i --no-sign
              echo "::endgroup::"
          fi

          echo '.'
          echo "Generated stuff:"
          ls -lA --color=always ..
          echo "<-- EOF"

          echo '.'
          echo "Moving all to the right place ..."
          mkdir -pv debian/pkgs/${{ matrix.version_prefix }}
          mv -vi ../*.deb ../*.build* debian/pkgs/${{ matrix.version_prefix }}

          echo '.'
          echo "Stuff now at the right place:"
          ls -lA --color=always debian/pkgs/*/*
          echo "<-- EOF"

      - name: 'Upload Source Package'
        id: upload-source-artifacts
        uses: actions/upload-artifact@v4
        with:
          name: debian_bin_pkgs_${{ matrix.version_prefix }}
          path: debian/pkgs/*/*
          retention-days: ${{ inputs.retention_days }}


# vim: et tabstop=2 expandtab shiftwidth=2 softtabstop=2 list
